<?php

namespace Stuzzo\Bundle\MonologExtenderBundle\Processor;

use Monolog\Processor\WebProcessor;
use Stuzzo\Monolog\Processor\ExtendedWebProcessor;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpKernel\Event\GetResponseEvent;
use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage;
use Symfony\Component\Security\Core\User\UserInterface;

/**
 * Add Request data to the record generated by logger
 *
 * @author Alfredo Aiello <stuzzo@gmail.com>
 */
class WebUserDataProcessor extends ExtendedWebProcessor
{
    
    /** @var TokenStorage */
    private $tokenStorage;
    
    /** @var UserInterface */
    private $user;
    
    public function __construct(TokenStorage $tokenStorage, $serverData = null, $extraFields = null)
    {
        parent::__construct($serverData, $extraFields);
//        $this->extraFields  = [];
        $this->tokenStorage = $tokenStorage;
    }
    
    public function __invoke(array $record)
    {
        $record = parent::__invoke($record);
        
        return $this->addRequestData($record);
    }
    
    protected function addRequestData($record)
    {
        $request = isset($GLOBALS['request']) ? $GLOBALS['request'] : '';
        if (empty($request)) {
            return $record;
        }
        
        if ($request instanceof Request) {
            return $this->addSymfonyRequestData($request, $record);
        }
        
        /*
         * Here you can add other request classes
         */
    }
    
    protected function addSymfonyRequestData(Request $request, $record)
    {
        $record['headers'] = $request->headers->all();
        $record['files']   = $request->files->all();
        if ('POST' === $request->getMethod()) {
            $record['data'] = $request->request->all();
        } else {
            $record['data'] = $request->query->all();
        }
        
        if (null !== $this->user) {
            $record['extra']['user'] = sprintf('%s %s', $this->user->getUsername(),
                                               json_encode($this->user->getRoles()));
        }
        
        return $record;
    }
    
    public function onKernelRequest(GetResponseEvent $event)
    {
        $postParams = $event->getRequest()->request->all();
        if (false === empty($postParams)) {
            $this->postParams = serialize($postParams);
        }
        
        if (null === $token = $this->tokenStorage->getToken()) {
            return;
        }
        
        if (!is_object($user = $token->getUser())) {
            // e.g. anonymous authentication
            return;
        }
        
        $this->user = $user;
    }
}
